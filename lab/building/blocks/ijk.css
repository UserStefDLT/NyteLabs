
.calculate {

    /* variables:
    --i: n;

    --i
    --kk --kk10
    --ixj --ijkk --ijkk10

    --n2 --n2h --n2tf --n3 --n6
    --b 
    --ah --abh --axbh
    --d26h --cd26h --cxd26h



    {how  many tiles are in each side of the square.}
    {the variable 'axis-len' should be an odd number.}
    --axis-len: 9;
    --axis-half: calc((var(--axis-len) + 1) / 2);
    
    {'j' is the same as 'i', but going backwards.}
    {'k' is like 'i', but 0 is at the middle.}
    --j: calc(var(--axis-len) - var(--i) + 1);
    --k: calc(var(--i) - var(--axis-half));

    
    --i
    --kk
    --kk10
    --ixj
    --ijkk
    --ijkk10

    {'kk' is 'k' times 'k'.}
    --kk: calc(var(--k) * var(--k));
    {'kk1' was based on [k/(kk/10+1)], but the 10 was lowered.}
    {'kk1' is 'k' divided by 'kk'/10 with a +1 to avoid the divided by 0.}
    {'kk10' is 'kk1' * 'kk1'}
    --kk1: calc(var(--k) / (var(--kk) / 4 + 1));
    --kk10: calc(var(--kk1) * var(--kk1));

    {'i' + 'j'}
    {'i' * 'j'}
    --ij: calc(var(--i) + var(--j));
    --ixj: calc(var(--i) * var(--j));
    --ijkk: calc(var(--ij) + var(--kk));
    --ijkk10: calc(var(--ij) + var(--kk10));



    --axis-len: 9;
    --axis-half: calc((var(--axis-len) + 1) / 2);
    --j: calc(var(--axis-len) - var(--i) + 1);
    --k: calc(var(--i) - var(--axis-half));

    --kk: calc(var(--k) * var(--k));
    --kk1: calc(var(--k) / (var(--kk) / 4 + 1));
    --kk10: calc(var(--kk1) * var(--kk1));

    --ij: calc(var(--i) + var(--j));
    --ixj: calc(var(--i) * var(--j));
    --ijkk: calc(var(--ij) + var(--kk));
    --ijkk10: calc(var(--ij) + var(--kk10));


    .map .cube:nth-of-type(2n+0) {--n2: 1; --n2h: 1; --n2tf: 0;}
    .map .cube:nth-of-type(2n+1) {--n2: 2; --n2h: .5; --n2tf: 1;}
    .map .cube:nth-of-type(6n+0) {--n3: 1; --n6: .5;}
    .map .cube:nth-of-type(6n+1) {--n3: 2; --n6: 2;}
    .map .cube:nth-of-type(6n+2) {--n3: 3; --n6: 3;}
    .map .cube:nth-of-type(6n+3) {--n3: 1; --n6: 4;}
    .map .cube:nth-of-type(6n+4) {--n3: 2; --n6: 3;}
    .map .cube:nth-of-type(6n+5) {--n3: 3; --n6: 2;}
    


    {}
    
    --b: calc(var(--n2) * var(--n3));
    --ah: calc(var(--n2h) + var(--n3));
    --bh: calc(var(--n2h) * var(--n3));
    --abh: calc(var(--ah) + var(--bh));
    --axbh: calc(var(--ah) * var(--bh));
    --c26h: calc(var(--n2h) - var(--n6));
    --d26h: calc(var(--n2h) / var(--n6));
    --cd26h: calc(var(--c26h) + var(--d26h));
    --cxd26h: calc(var(--c26h) * var(--d26h));

    */

    /*
    --row-i
    --m2h
    --m2tf

    --row-ah
    --row-abh
    --row-axbh
    --row-d26h
    --row-cd26h
    --row-cxd26h

    --row-kk
    --row-kk10
    
    --row-ixj
    --row-ijkk
    --row-ijkk10
    */

    /* 
    --i
    --n2h
    --n2tf

    --b
    --ah
    --abh
    --axbh
    --d26h
    --cd26h
    --cxd26h

    --kk
    --kk10
    --ixj
    --ijkk
    --ijkk10
    */
    
}



.cube:nth-of-type(2n+0) {--n2: 1; --n2h: 1; --n2tf: 0;}
.cube:nth-of-type(2n+1) {--n2: 2; --n2h: .5; --n2tf: 1;}
.cube:nth-of-type(6n+0) {--n3: 1; --n6: .5;}
.cube:nth-of-type(6n+1) {--n3: 2; --n6: 2;}
.cube:nth-of-type(6n+2) {--n3: 3; --n6: 3;}
.cube:nth-of-type(6n+3) {--n3: 1; --n6: 4;}
.cube:nth-of-type(6n+4) {--n3: 2; --n6: 3;}
.cube:nth-of-type(6n+5) {--n3: 3; --n6: 2;}

.vals {
    /* ready */

    /* ijk */
    --axis-len: 9;
    --axis-half: calc((var(--axis-len) + 1) / 2);
    --j: calc(var(--axis-len) - var(--i) + 1);
    --k: calc(var(--i) - var(--axis-half));

    --kk: calc(var(--k) * var(--k));
    --kk1: calc(var(--k) / (var(--kk) / 4 + 1));
    --kk10: calc(var(--kk1) * var(--kk1));

    --ij: calc(var(--i) + var(--j));
    --ixj: calc(var(--i) * var(--j));
    --ijkk: calc(var(--ij) + var(--kk));
    --ijkk10: calc(var(--ij) + var(--kk10));

    /* n236h + abcd */
    --b: calc(var(--n2) * var(--n3));
    --ah: calc(var(--n2h) + var(--n3));
    --bh: calc(var(--n2h) * var(--n3));
    --abh: calc(var(--ah) + var(--bh));
    --axbh: calc(var(--ah) * var(--bh));
    --c26h: calc(var(--n2h) - var(--n6));
    --d26h: calc(var(--n2h) / var(--n6));
    --cd26h: calc(var(--c26h) + var(--d26h));
    --cxd26h: calc(var(--c26h) * var(--d26h));
}

.check {
    --row-val-nn: calc(var(--var));                         --row-nn-mul: 1;        --row-nn-add: 0;

    --row-val-20: calc(var(--row-ijkk10));                  --row-20-mul: 15;       --row-20-add: -150;
    --row-val-19: calc(var(--row-ijkk10));                  --row-19-mul: 15;       --row-19-add: -150;
    --row-val-18: calc(var(--m2tf));                        --row-18-mul: 10;       --row-18-add: 0;
    --row-val-17: calc(var(--m2tf));                        --row-17-mul: 10;       --row-17-add: 0;
    --row-val-16: calc(var(--m2tf));                        --row-16-mul: 10;       --row-16-add: 0;
    --row-val-15: calc(var(--row-d26h) + var(--row-kk));    --row-15-mul: 1;        --row-15-add: 0;
    --row-val-14: calc(var(--row-abh));                     --row-14-mul: -5;       --row-14-add: 0;
    --row-val-13: calc(var(--row-axbh));                    --row-13-mul: 1;        --row-13-add: 0;
    --row-val-12: calc(var(--row-cd26h));                   --row-12-mul: 3;        --row-12-add: 0;
    --row-val-11: calc(var(--row-cxd26h));                  --row-11-mul: 8;        --row-11-add: 0;
    --row-val-10: calc(var(--row-i) * var(--m2h));          --row-10-mul: 5;        --row-10-add: 0;
    --row-val-09: calc(var(--row-kk10));                    --row-09-mul: -15;      --row-09-add: 0;
    --row-val-08: calc(var(--row-kk10));                    --row-08-mul: 15;       --row-08-add: 0;
    --row-val-07: calc(var(--row-ixj));                     --row-07-mul: 2;        --row-07-add: -30;
    --row-val-06: calc(var(--row-ixj));                     --row-06-mul: 2;        --row-06-add: -30;
    --row-val-05: calc(var(--row-ixj));                     --row-05-mul: -2;       --row-05-add: 10;
    --row-val-04: calc(var(--row-ijkk));                    --row-04-mul: -1;       --row-04-add: +12;
    --row-val-03: calc(var(--row-ijkk10));                  --row-03-mul: 5;        --row-03-add: -50;
    --row-val-02: calc(var(--row-ah));                      --row-02-mul: 3;        --row-02-add: 0;
    --row-val-01: calc(var(--row-kk));                      --row-01-mul: 5 / 4;    --row-01-add: 0;
    --row-val-00: calc(var(--row-kk));                      --row-00-mul: -7 / 4;   --row-00-add: 25;
    --row-val: 1;


    --col-val-nn-base: calc(var(--var));                --col-nn-mul: 1;    --col-nn-add: 0;

    --col-val-20-base: calc(var(--ijkk));               --col-20-mul: 1;    --col-20-add: -12;
    --col-val-19-base: calc(var(--ijkk10));             --col-19-mul: 15;   --col-19-b-add: -150;
    --col-val-18-base: calc(var(--n2tf));               --col-18-mul: -30;  --col-18-add: 30;
    --col-val-17-base: calc(var(--b));                  --col-17-mul: 3;    --col-17-add: 0;
    --col-val-16-base: calc(var(--d26h) + var(--kk));   --col-16-mul: 1;    --col-16-add: 0;
    --col-val-15-base: calc(var(--i) * var(--n2h));     --col-15-mul: 3;    --col-15-add: 0;
    --col-val-14-base: calc(var(--abh));                --col-14-mul: 7;    --col-14-add: 0;
    --col-val-13-base: calc(var(--axbh));               --col-13-mul: 1;    --col-13-add: 0;
    --col-val-12-base: calc(var(--cd26h));              --col-12-mul: 3;    --col-12-add: 0;
    --col-val-11-base: calc(var(--cxd26h));             --col-11-mul: 8;    --col-11-add: 0;
    --col-val-10-base: calc(var(--i) * var(--n2h));     --col-10-mul: 3;    --col-10-add: 0;
    --col-val-09-base: calc(var(--kk10));               --col-09-mul: 25;   --col-09-add: 0;
    --col-val-08-base: calc(var(--kk10));               --col-08-mul: 25;   --col-08-add: 0;
    --col-val-07-base: calc(var(--kk10));               --col-07-mul: 25;   --col-07-add: 0;
    --col-val-06-base: calc(var(--ixj));                --col-06-mul: 2;    --col-06-add: 10;
    --col-val-05-base: calc(var(--ixj));                --col-05-mul: 2;    --col-05-add: 10;
    --col-val-04-base: calc(var(--ijkk));               --col-04-mul: 1;    --col-04-add: -12;
    --col-val-03-base: calc(var(--ijkk10));             --col-03-mul: 5;    --col-03-add: -50;
    --col-val-02-base: calc(var(--ah));                 --col-02-mul: 7;    --col-02-add: 0;
    --col-val-01-base: calc(var(--kk));                 --col-01-mul: 5/4;  --col-01-add: 0;
    --col-val-00-base: calc(var(--kk));                 --col-00-mul: 5/4;  --col-00-add: 0;
    --col-val: 1;

   

}


.new {
    --row-val-20-base: calc(var(--row-ijkk10)); --row-20-b-mul: 15; --row-20-b-add: -150;
    --col-val-20-base: calc(var(--ijkk)); --col-20-mul: 1; --col-20-add: -12;

    --row-val-19-b-base: calc(var(--row-ijkk10)); --row-19-b-mul: 15; --row-19-b-add: -150;
    --col-val-19-b-base: calc(var(--ijkk10)); --col-19-b-mul: 15; --col-19-b-add: -150;
}

/* 
{in isometric view the grid is a '◊' or '♦' shape.}
   ↑
  ↖↑↗
←←←•→→→
  ↙↓↘
   ↓

{but for ease of organizing, I'll use this:}
↖ ↑ ↗   
← • →
↙ ↓ ↘   

↖↗↙↘
←→↑↓

val-03: lower on axis and grows small hills on 4 sides.
val-04: [↖↘] low, [•] mid, [↙↗] high.
val-05: [↙↗] low, [•] mid, [↖↘] high.
val-06: [←→↑↓] low, [↖↗↙↘] mid, [•] high. {like a balloon}
val-07: [←→↑↓] low, [•] mid, [↖↗↙↘] high. {like a balloon with a rope from [↖] to [↘]}

val-20: [•] lowest, [↖↘] low, [↙↗] mid, [←↑→↓] high.

*/




/* [Resolving for kk10]

--kk10: calc( (var(--k) / (var(--kk) / 4 + 1)) * (var(--k) / (var(--kk) / 4 + 1)) );
    --kk10: calc( (var(--k) / (var(--k) * var(--k) / 4 + 1)) * (var(--k) / (var(--k) * var(--k) / 4 + 1)) );
    
    --kk4: calc(var(--kk) / (var(--kk)*var(--kk)/16 + var(--kk)/2 + 1);
    
    --kk4: (k / (1 + k*k/4)) * (k / (1 + k*k/4));
         k             k                   k * k            
    ─────────── * ─────────── = ─────────────────────────── 
     k*k/4 + 1     k*k/4 + 1     (k*k/4 + 1) * (k*k/4 + 1)  

     
               k * k            
    ─────────────────────────── 
     (k*k/4 + 1) * (k*k/4 + 1)  

     (k*k/4 + 1) * (k*k/4 + 1)
    k*k/4(k*k/4 + 1) + (k*k/4 + 1)
    (k*k/4 * k*k/4 + k*k/4) + (k*k/4 + 1)


    (k*k/4 * k*k/4 + k*k/4)
     k*k     k*k     k*k*k*k
    ───── * ───── = ───────── 
      4       4        16

       (k*k*k*k / 16)
     + (k*k / 4)
     + (k*k / 4 + 1)

     kk2 = k*k/2
     kk4 = k*k/4
     k4k = k*k*k*k
     k4k16 = k*k*k*k/16
     k4k16 + kk4 + kk4 + 1
     kk / (k4k16 + kk4 + kk4 + 1)
     
     kk / (k4k16 + kk2 + 1)
     
    k*k*k*k/16 + k*k/2 + 1



    --kk10: 
    ( (var(--k) 
            / ( var(--k) * var(--k) / 4 
                + 1) ) 
    * (var(--k) 
            / ( var(--k) * var(--k) / 4 
                + 1))
    );

    --kk4: 
    ( var(--k) * var(--k) / 
                        ( 
                            var(--k) * var(--k) * var(--k) * var(--k) / 16 
                            + var(--k) * var(--k) / 2 
                            + 1
                        );

*/




/* To Use */
*:nth-of-type(2n+0) {--n2: 1; --n2h: 1; --n2tf: 0; --m2: 1; --m2h: 1; --m2tf: 0;}
*:nth-of-type(2n+1) {--n2: 2; --n2h: .5; --n2tf: 1; --m2: 2; --m2h: .5; --m2tf: 1;}
*:nth-of-type(6n+0) {--n3: 1; --n6: .5; --m3: 1; --m6: .5;}
*:nth-of-type(6n+1) {--n3: 2; --n6: 2; --m3: 2; --m6: 2;}
*:nth-of-type(6n+2) {--n3: 3; --n6: 3; --m3: 3; --m6: 3;}
*:nth-of-type(6n+3) {--n3: 1; --n6: 4; --m3: 1; --m6: 4;}
*:nth-of-type(6n+4) {--n3: 2; --n6: 3; --m3: 2; --m6: 3;}
*:nth-of-type(6n+5) {--n3: 3; --n6: 2; --m3: 3; --m6: 2;}


.row:nth-of-type(2n+0) {--m2: 1; --m2h: 1; --m2tf: 0;}
.row:nth-of-type(2n+1) {--m2: 2; --m2h: .5; --m2tf: 1;}
.row:nth-of-type(6n+0) {--m3: 1; --m6: .5;}
.row:nth-of-type(6n+1) {--m3: 2; --m6: 2;}
.row:nth-of-type(6n+2) {--m3: 3; --m6: 3;}
.row:nth-of-type(6n+3) {--m3: 1; --m6: 4;}
.row:nth-of-type(6n+4) {--m3: 2; --m6: 3;}
.row:nth-of-type(6n+5) {--m3: 3; --m6: 2;}

.cube:nth-of-type(2n+0) {--n2: 1; --n2h: 1; --n2tf: 0;}
.cube:nth-of-type(2n+1) {--n2: 2; --n2h: .5; --n2tf: 1;}
.cube:nth-of-type(6n+0) {--n3: 1; --n6: .5;}
.cube:nth-of-type(6n+1) {--n3: 2; --n6: 2;}
.cube:nth-of-type(6n+2) {--n3: 3; --n6: 3;}
.cube:nth-of-type(6n+3) {--n3: 1; --n6: 4;}
.cube:nth-of-type(6n+4) {--n3: 2; --n6: 3;}
.cube:nth-of-type(6n+5) {--n3: 3; --n6: 2;}